// <auto-generated />
using System;
using Avalon.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Avalon.Migrations
{
    [DbContext(typeof(AvalonContext))]
    partial class AvalonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Avalon.Database.Entities.AvalonProfileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueIdentity")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CS_AS");

                    b.HasKey("Id");

                    b.HasIndex("CreationDateTime");

                    b.HasIndex("DeletedDateTime");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModificationDateTime");

                    b.HasIndex("UniqueIdentity");

                    b.ToTable("AvalonProfiles");
                });

            modelBuilder.Entity("Avalon.Database.Entities.AvalonRoleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMinionOfMordred")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueIdentity")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CS_AS");

                    b.HasKey("Id");

                    b.HasIndex("CreationDateTime");

                    b.HasIndex("DeletedDateTime");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModificationDateTime");

                    b.HasIndex("UniqueIdentity");

                    b.ToTable("AvalonRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = false,
                            Name = "Merlin"
                        },
                        new
                        {
                            Id = 2L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = false,
                            Name = "Percival"
                        },
                        new
                        {
                            Id = 3L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = true,
                            Name = "Mordred"
                        },
                        new
                        {
                            Id = 4L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = true,
                            Name = "Assassin"
                        },
                        new
                        {
                            Id = 5L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = true,
                            Name = "Morgana"
                        },
                        new
                        {
                            Id = 6L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = true,
                            Name = "Oberon"
                        },
                        new
                        {
                            Id = 7L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = true,
                            Name = "Evil"
                        },
                        new
                        {
                            Id = 8L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = true,
                            Name = "Evil"
                        },
                        new
                        {
                            Id = 9L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = true,
                            Name = "Evil"
                        },
                        new
                        {
                            Id = 10L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = true,
                            Name = "Evil"
                        },
                        new
                        {
                            Id = 11L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = true,
                            Name = "Evil"
                        },
                        new
                        {
                            Id = 12L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = true,
                            Name = "Evil"
                        },
                        new
                        {
                            Id = 13L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = false,
                            Name = "People"
                        },
                        new
                        {
                            Id = 14L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = false,
                            Name = "People"
                        },
                        new
                        {
                            Id = 15L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = false,
                            Name = "People"
                        },
                        new
                        {
                            Id = 16L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = false,
                            Name = "People"
                        },
                        new
                        {
                            Id = 17L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = false,
                            Name = "People"
                        },
                        new
                        {
                            Id = 18L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = false,
                            Name = "People"
                        },
                        new
                        {
                            Id = 19L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = false,
                            Name = "People"
                        },
                        new
                        {
                            Id = 20L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsMinionOfMordred = false,
                            Name = "People"
                        });
                });

            modelBuilder.Entity("Avalon.Database.Entities.AvalonUserFeedbackEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ContactInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UniqueIdentity")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CS_AS");

                    b.HasKey("Id");

                    b.HasIndex("CreationDateTime");

                    b.HasIndex("DeletedDateTime");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModificationDateTime");

                    b.HasIndex("UniqueIdentity");

                    b.ToTable("AvalonUserFeedbacks");
                });

            modelBuilder.Entity("Avalon.Database.Entities.FinishUpGameEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AvalonProfileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("OfflineGameId")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueIdentity")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CS_AS");

                    b.HasKey("Id");

                    b.HasIndex("AvalonProfileId");

                    b.HasIndex("CreationDateTime");

                    b.HasIndex("DeletedDateTime");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModificationDateTime");

                    b.HasIndex("OfflineGameId");

                    b.HasIndex("UniqueIdentity");

                    b.ToTable("FinishUpGames");
                });

            modelBuilder.Entity("Avalon.Database.Entities.OfflineGameEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("StageId")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueIdentity")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CS_AS");

                    b.HasKey("Id");

                    b.HasIndex("CreationDateTime");

                    b.HasIndex("DeletedDateTime");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModificationDateTime");

                    b.HasIndex("StageId");

                    b.HasIndex("UniqueIdentity");

                    b.ToTable("OfflineGames");
                });

            modelBuilder.Entity("Avalon.Database.Entities.Relations.OfflineGameMissionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DoNeedsTwoOfFails")
                        .HasColumnType("bit");

                    b.Property<byte>("FailCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Index")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFailed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("OfflineGameId")
                        .HasColumnType("bigint");

                    b.Property<byte>("PlayerCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("UniqueIdentity")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CS_AS");

                    b.HasKey("Id");

                    b.HasIndex("CreationDateTime");

                    b.HasIndex("DeletedDateTime");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModificationDateTime");

                    b.HasIndex("OfflineGameId");

                    b.HasIndex("UniqueIdentity");

                    b.ToTable("OfflineGameMissions");
                });

            modelBuilder.Entity("Avalon.Database.Entities.Relations.OfflineGameMissionProfileEntity", b =>
                {
                    b.Property<long>("OfflineGameMissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("AvalonProfileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFail")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UniqueIdentity")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CS_AS");

                    b.HasKey("OfflineGameMissionId", "AvalonProfileId");

                    b.HasIndex("AvalonProfileId");

                    b.HasIndex("CreationDateTime");

                    b.HasIndex("DeletedDateTime");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModificationDateTime");

                    b.HasIndex("UniqueIdentity");

                    b.ToTable("OfflineGameMissionProfiles");
                });

            modelBuilder.Entity("Avalon.Database.Entities.Relations.OfflineGameProfileRoleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AvalonProfileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvalonRoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("OfflineGameId")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueIdentity")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CS_AS");

                    b.HasKey("Id");

                    b.HasIndex("AvalonProfileId");

                    b.HasIndex("AvalonRoleId");

                    b.HasIndex("CreationDateTime");

                    b.HasIndex("DeletedDateTime");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModificationDateTime");

                    b.HasIndex("OfflineGameId");

                    b.HasIndex("UniqueIdentity");

                    b.ToTable("OfflineGameProfileRoles");
                });

            modelBuilder.Entity("Avalon.Database.Entities.StageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DoNeedsTwoOfFailsAtMission4")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("MinionOfMerlinCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinionOfMordredCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Mission1PlayerCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Mission2PlayerCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Mission3PlayerCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Mission4PlayerCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Mission5PlayerCount")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PlayerCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("UniqueIdentity")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("SQL_Latin1_General_CP1_CS_AS");

                    b.HasKey("Id");

                    b.HasIndex("CreationDateTime");

                    b.HasIndex("DeletedDateTime");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModificationDateTime");

                    b.HasIndex("UniqueIdentity");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = false,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)3,
                            MinionOfMordredCount = (byte)2,
                            Mission1PlayerCount = (byte)2,
                            Mission2PlayerCount = (byte)3,
                            Mission3PlayerCount = (byte)2,
                            Mission4PlayerCount = (byte)3,
                            Mission5PlayerCount = (byte)3,
                            Name = "5 Players",
                            PlayerCount = (byte)5
                        },
                        new
                        {
                            Id = 2L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = false,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)4,
                            MinionOfMordredCount = (byte)2,
                            Mission1PlayerCount = (byte)2,
                            Mission2PlayerCount = (byte)3,
                            Mission3PlayerCount = (byte)4,
                            Mission4PlayerCount = (byte)3,
                            Mission5PlayerCount = (byte)4,
                            Name = "6 Players",
                            PlayerCount = (byte)6
                        },
                        new
                        {
                            Id = 3L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = true,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)4,
                            MinionOfMordredCount = (byte)3,
                            Mission1PlayerCount = (byte)2,
                            Mission2PlayerCount = (byte)3,
                            Mission3PlayerCount = (byte)3,
                            Mission4PlayerCount = (byte)4,
                            Mission5PlayerCount = (byte)4,
                            Name = "7 Players",
                            PlayerCount = (byte)7
                        },
                        new
                        {
                            Id = 4L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = true,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)5,
                            MinionOfMordredCount = (byte)3,
                            Mission1PlayerCount = (byte)3,
                            Mission2PlayerCount = (byte)4,
                            Mission3PlayerCount = (byte)4,
                            Mission4PlayerCount = (byte)5,
                            Mission5PlayerCount = (byte)5,
                            Name = "8 Players",
                            PlayerCount = (byte)8
                        },
                        new
                        {
                            Id = 5L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = true,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)6,
                            MinionOfMordredCount = (byte)3,
                            Mission1PlayerCount = (byte)3,
                            Mission2PlayerCount = (byte)4,
                            Mission3PlayerCount = (byte)4,
                            Mission4PlayerCount = (byte)5,
                            Mission5PlayerCount = (byte)5,
                            Name = "9 Players",
                            PlayerCount = (byte)9
                        },
                        new
                        {
                            Id = 6L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = true,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)6,
                            MinionOfMordredCount = (byte)4,
                            Mission1PlayerCount = (byte)3,
                            Mission2PlayerCount = (byte)4,
                            Mission3PlayerCount = (byte)4,
                            Mission4PlayerCount = (byte)5,
                            Mission5PlayerCount = (byte)5,
                            Name = "10 Players",
                            PlayerCount = (byte)10
                        },
                        new
                        {
                            Id = 7L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = true,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)6,
                            MinionOfMordredCount = (byte)5,
                            Mission1PlayerCount = (byte)3,
                            Mission2PlayerCount = (byte)4,
                            Mission3PlayerCount = (byte)4,
                            Mission4PlayerCount = (byte)5,
                            Mission5PlayerCount = (byte)6,
                            Name = "11 Players",
                            PlayerCount = (byte)11
                        },
                        new
                        {
                            Id = 8L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = true,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)7,
                            MinionOfMordredCount = (byte)5,
                            Mission1PlayerCount = (byte)3,
                            Mission2PlayerCount = (byte)4,
                            Mission3PlayerCount = (byte)4,
                            Mission4PlayerCount = (byte)5,
                            Mission5PlayerCount = (byte)6,
                            Name = "12 Players",
                            PlayerCount = (byte)12
                        },
                        new
                        {
                            Id = 9L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = true,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)7,
                            MinionOfMordredCount = (byte)6,
                            Mission1PlayerCount = (byte)3,
                            Mission2PlayerCount = (byte)4,
                            Mission3PlayerCount = (byte)4,
                            Mission4PlayerCount = (byte)5,
                            Mission5PlayerCount = (byte)7,
                            Name = "13 Players",
                            PlayerCount = (byte)13
                        },
                        new
                        {
                            Id = 10L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = true,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)8,
                            MinionOfMordredCount = (byte)6,
                            Mission1PlayerCount = (byte)3,
                            Mission2PlayerCount = (byte)4,
                            Mission3PlayerCount = (byte)4,
                            Mission4PlayerCount = (byte)5,
                            Mission5PlayerCount = (byte)7,
                            Name = "14 Players",
                            PlayerCount = (byte)14
                        },
                        new
                        {
                            Id = 11L,
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoNeedsTwoOfFailsAtMission4 = true,
                            IsDeleted = false,
                            MinionOfMerlinCount = (byte)8,
                            MinionOfMordredCount = (byte)7,
                            Mission1PlayerCount = (byte)3,
                            Mission2PlayerCount = (byte)4,
                            Mission3PlayerCount = (byte)4,
                            Mission4PlayerCount = (byte)5,
                            Mission5PlayerCount = (byte)8,
                            Name = "15 Players",
                            PlayerCount = (byte)15
                        });
                });

            modelBuilder.Entity("Avalon.Database.Entities.FinishUpGameEntity", b =>
                {
                    b.HasOne("Avalon.Database.Entities.AvalonProfileEntity", "AvalonProfile")
                        .WithMany("FinishUpGames")
                        .HasForeignKey("AvalonProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Avalon.Database.Entities.OfflineGameEntity", "OfflineGame")
                        .WithMany("FinishUpGames")
                        .HasForeignKey("OfflineGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AvalonProfile");

                    b.Navigation("OfflineGame");
                });

            modelBuilder.Entity("Avalon.Database.Entities.OfflineGameEntity", b =>
                {
                    b.HasOne("Avalon.Database.Entities.StageEntity", "Stage")
                        .WithMany("OfflineGames")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Avalon.Database.Entities.Relations.OfflineGameMissionEntity", b =>
                {
                    b.HasOne("Avalon.Database.Entities.OfflineGameEntity", "OfflineGame")
                        .WithMany("OfflineGameMissions")
                        .HasForeignKey("OfflineGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OfflineGame");
                });

            modelBuilder.Entity("Avalon.Database.Entities.Relations.OfflineGameMissionProfileEntity", b =>
                {
                    b.HasOne("Avalon.Database.Entities.AvalonProfileEntity", "AvalonProfile")
                        .WithMany("OfflineGameMissionProfiles")
                        .HasForeignKey("AvalonProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Avalon.Database.Entities.Relations.OfflineGameMissionEntity", "OfflineGameMission")
                        .WithMany("OfflineGameMissionProfiles")
                        .HasForeignKey("OfflineGameMissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AvalonProfile");

                    b.Navigation("OfflineGameMission");
                });

            modelBuilder.Entity("Avalon.Database.Entities.Relations.OfflineGameProfileRoleEntity", b =>
                {
                    b.HasOne("Avalon.Database.Entities.AvalonProfileEntity", "AvalonProfile")
                        .WithMany("OfflineGameProfileRoles")
                        .HasForeignKey("AvalonProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Avalon.Database.Entities.AvalonRoleEntity", "AvalonRole")
                        .WithMany("OfflineGameProfileRoles")
                        .HasForeignKey("AvalonRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Avalon.Database.Entities.OfflineGameEntity", "OfflineGame")
                        .WithMany("OfflineGameProfileRoles")
                        .HasForeignKey("OfflineGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AvalonProfile");

                    b.Navigation("AvalonRole");

                    b.Navigation("OfflineGame");
                });

            modelBuilder.Entity("Avalon.Database.Entities.AvalonProfileEntity", b =>
                {
                    b.Navigation("FinishUpGames");

                    b.Navigation("OfflineGameMissionProfiles");

                    b.Navigation("OfflineGameProfileRoles");
                });

            modelBuilder.Entity("Avalon.Database.Entities.AvalonRoleEntity", b =>
                {
                    b.Navigation("OfflineGameProfileRoles");
                });

            modelBuilder.Entity("Avalon.Database.Entities.OfflineGameEntity", b =>
                {
                    b.Navigation("FinishUpGames");

                    b.Navigation("OfflineGameMissions");

                    b.Navigation("OfflineGameProfileRoles");
                });

            modelBuilder.Entity("Avalon.Database.Entities.Relations.OfflineGameMissionEntity", b =>
                {
                    b.Navigation("OfflineGameMissionProfiles");
                });

            modelBuilder.Entity("Avalon.Database.Entities.StageEntity", b =>
                {
                    b.Navigation("OfflineGames");
                });
#pragma warning restore 612, 618
        }
    }
}
